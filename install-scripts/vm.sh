#!/bin/bash
# ðŸ’« https://github.com/jellydn/Arch-Hyprland ðŸ’« #
# VM optimizations and packages for virtual machines #

vm_pkg=(
  open-vm-tools
  xf86-video-vmware
  xf86-input-vmmouse
  mesa
)

# VM-specific packages for different hypervisors
vm_pkg_optional=(
  spice-vdagent    # For QEMU/KVM with SPICE
  virtualbox-guest-utils  # For VirtualBox (if detected)
)

## WARNING: DO NOT EDIT BEYOND THIS LINE IF YOU DON'T KNOW WHAT YOU ARE DOING! ##
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Change the working directory to the parent directory of the script
PARENT_DIR="$SCRIPT_DIR/.."
cd "$PARENT_DIR" || { echo "${ERROR} Failed to change directory to $PARENT_DIR"; exit 1; }

# Source the global functions script
if ! source "$(dirname "$(readlink -f "$0")")/Global_functions.sh"; then
  echo "Failed to source Global_functions.sh"
  exit 1
fi

# Set the name of the log file to include the current date and time
LOG="Install-Logs/install-$(date +%d-%H%M%S)_vm.log"

# Function to detect VM type
detect_vm_type() {
    local vm_type="unknown"
    
    # Check for VMware
    if lspci | grep -i vmware >/dev/null 2>&1; then
        vm_type="vmware"
    # Check for VirtualBox
    elif lspci | grep -i virtualbox >/dev/null 2>&1 || lsmod | grep -i vboxguest >/dev/null 2>&1; then
        vm_type="virtualbox"
    # Check for QEMU/KVM
    elif lscpu | grep -i "hypervisor vendor" | grep -i "kvm" >/dev/null 2>&1; then
        vm_type="qemu_kvm"
    # Check DMI info for VM indicators
    elif dmidecode -s system-product-name 2>/dev/null | grep -i "virtual\|vmware\|qemu\|kvm\|xen" >/dev/null 2>&1; then
        vm_type="generic_vm"
    fi
    
    echo "$vm_type"
}

# Installing VM packages
printf "\n%s - Installing ${SKY_BLUE}VM optimization packages${RESET} .... \n" "${NOTE}"

# Detect VM type
VM_TYPE=$(detect_vm_type)
echo "${INFO} Detected VM environment: ${VM_TYPE}" | tee -a "$LOG"

# Install common VM packages
for VM_PKG in "${vm_pkg[@]}"; do
  install_package "$VM_PKG" "$LOG"
done 

# Install VM-specific packages based on detected type
case "$VM_TYPE" in
    "vmware")
        echo "${INFO} Installing VMware-specific optimizations..." | tee -a "$LOG"
        # VMware tools are already included in open-vm-tools
        ;;
    "virtualbox")
        echo "${INFO} Installing VirtualBox-specific optimizations..." | tee -a "$LOG"
        install_package "virtualbox-guest-utils" "$LOG"
        ;;
    "qemu_kvm")
        echo "${INFO} Installing QEMU/KVM-specific optimizations..." | tee -a "$LOG"
        install_package "spice-vdagent" "$LOG"
        ;;
    *)
        echo "${INFO} Generic VM detected, installing common VM packages..." | tee -a "$LOG"
        ;;
esac

# VM-specific Hyprland optimizations
echo "${INFO} Applying VM-specific Hyprland configurations..." | tee -a "$LOG"

# Create VM-specific Hyprland config directory
mkdir -p "$HOME/.config/hypr/vm-configs"

# Create VM optimizations config file
cat > "$HOME/.config/hypr/vm-configs/vm-optimizations.conf" << 'EOF'
# VM-specific Hyprland optimizations
# Generated by KooL Arch-Hyprland installer

# Reduce animations for better VM performance
animations {
    enabled = true
    bezier = myBezier, 0.05, 0.9, 0.1, 1.05
    animation = windows, 1, 2, myBezier
    animation = windowsOut, 1, 2, default, popin 80%
    animation = border, 1, 5, default
    animation = borderangle, 1, 4, default
    animation = fade, 1, 2, default
    animation = workspaces, 1, 2, default
}

# VM-optimized rendering settings
render {
    explicit_sync = 0
    explicit_sync_kms = 0
}

# Reduce resource usage
decoration {
    blur {
        enabled = false  # Disable blur for better VM performance
    }
    drop_shadow = false  # Disable shadows for better performance
}

# VM-specific environment variables
env = WLR_NO_HARDWARE_CURSORS,1
env = WLR_RENDERER_ALLOW_SOFTWARE,1

# VM display settings
monitor = Virtual-1, 1920x1080@60, 0x0, 1
EOF

echo "${INFO} VM optimizations applied to ~/.config/hypr/vm-configs/vm-optimizations.conf" | tee -a "$LOG"

# Enable VM services
if systemctl list-unit-files | grep -q "vmtoolsd.service"; then
    echo "${INFO} Enabling VMware tools service..." | tee -a "$LOG"
    sudo systemctl enable vmtoolsd.service
fi

if systemctl list-unit-files | grep -q "vboxservice.service"; then
    echo "${INFO} Enabling VirtualBox guest service..." | tee -a "$LOG"
    sudo systemctl enable vboxservice.service
fi

# Additional VM optimizations
echo "${INFO} Applying additional VM optimizations..." | tee -a "$LOG"

# Disable some resource-intensive services for VM
services_to_mask=(
    "systemd-oomd.service"  # Out of memory daemon (can cause issues in VMs)
)

for service in "${services_to_mask[@]}"; do
    if systemctl list-unit-files | grep -q "$service"; then
        echo "${INFO} Masking $service for VM optimization..." | tee -a "$LOG"
        sudo systemctl mask "$service" 2>/dev/null || true
    fi
done

# Create VM-specific tips file
cat > "$HOME/.config/hypr/vm-configs/VM-TIPS.md" << 'EOF'
# VM-Specific Tips for KooL Hyprland

## Performance Optimizations Applied:
- Reduced animations for better performance
- Disabled blur effects and shadows
- Optimized rendering settings
- VM-specific environment variables set

## Manual Optimizations You Can Apply:

### 1. VM Settings (Host Side):
- Enable 3D acceleration in VM settings
- Allocate sufficient RAM (8GB+ recommended)
- Enable VT-x/AMD-V virtualization
- Increase video memory allocation

### 2. Additional Hyprland Tweaks:
Add these to your hyprland.conf if performance is still poor:
```
decoration {
    blur {
        enabled = false
    }
    drop_shadow = false
}

animations {
    enabled = false  # Disable all animations
}
```

### 3. Resolution and Display:
- Use standard resolutions (1920x1080, 1366x768)
- Avoid high refresh rates in VMs
- Single monitor setup is recommended

### 4. Resource Management:
- Close unnecessary applications
- Limit number of workspaces
- Use lightweight applications when possible

## Troubleshooting:
- If screen is black: Try WLR_NO_HARDWARE_CURSORS=1
- If rendering issues: Try WLR_RENDERER_ALLOW_SOFTWARE=1
- If input lag: Check VM mouse integration settings
EOF

echo "${OK} VM optimization installation completed!" | tee -a "$LOG"
echo "${INFO} VM tips and optimizations saved to ~/.config/hypr/vm-configs/" | tee -a "$LOG"

printf "\n%.0s" {1..2}